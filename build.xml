<?xml version="1.0" encoding="UTF-8"?>
<project name="VersionEyeModule" default="build">
    <target name="build" depends="install,prepare,lint,phploc,pdepend,phpmd-ci,phpcs-ci,phpcpd,phpdox,phpunit,phpcb"/>

    <target name="build-parallel" depends="install,prepare,lint,tools-parallel,phpunit,phpcb"/>

    <target name="travis" depends="install-composer-available,prepare">
        <parallel threadCount="2">
            <antcall target="lint"/>
            <antcall target="phpcs-ci"/>
            <antcall target="phpunit-codecoverage"/>
            <antcall target="coverage-checker"/>
        </parallel>
    </target>

    <target name="tools-parallel" description="Run tools in parallel">
        <parallel threadCount="2">
            <sequential>
                <antcall target="pdepend"/>
                <antcall target="phpmd-ci"/>
            </sequential>
            <antcall target="phpcpd"/>
            <antcall target="phpcs-ci"/>
            <antcall target="phploc"/>
            <antcall target="phpdox"/>
        </parallel>
    </target>

    <target name="clean" description="Cleanup build artifacts">
        <delete dir="${basedir}/satis"/>
        <delete dir="${basedir}/build/api"/>
        <delete dir="${basedir}/build/code-browser"/>
        <delete dir="${basedir}/build/coverage"/>
        <delete dir="${basedir}/build/logs"/>
        <delete dir="${basedir}/build/pdepend"/>
    </target>

    <target name="get-composer" depends="clean" description="Installs composer executable in the project">
        <exec executable="bash" failonerror="true">
            <arg value="-c"/>
            <arg value="curl -s https://getcomposer.org/installer | php"/>
        </exec>
    </target>

    <target name="build-satis" depends="get-composer" description="Creates packages.json via Satis">
        <exec executable="php">
            <arg value="${basedir}/composer.phar" />
            <arg value="create-project" />
            <arg value="composer/satis" />
        </exec>
    </target>

    <target name="build-composer-packages" depends="build-satis" description="Creates packages.json via Satis">
        <exec executable="php">
            <arg value="${basedir}/satis/bin/satis" />
            <arg value="build" />
            <arg value="repositories.json" />
            <arg value="${basedir}/build" />
        </exec>
    </target>

    <target name="install" depends="get-composer" description="Installs dependencies and sets up the project">
        <exec executable="php" failonerror="true">
            <arg value="${basedir}/composer.phar" />
            <arg value="update" />
            <arg value="--prefer-dist" />
            <arg value="--dev" />
        </exec>
    </target>

    <target name="install-composer-available" description="Installs dependencies via composer">
        <exec executable="composer" failonerror="true">
            <arg value="update" />
            <arg value="--prefer-source" />
            <arg value="--dev" />
        </exec>
    </target>

    <target name="prepare" depends="clean" description="Prepare for build">
        <mkdir dir="${basedir}/build/api"/>
        <mkdir dir="${basedir}/build/code-browser"/>
        <mkdir dir="${basedir}/build/coverage"/>
        <mkdir dir="${basedir}/build/logs"/>
        <mkdir dir="${basedir}/build/pdepend"/>
        <mkdir dir="${basedir}/build/phpdox"/>
    </target>

    <target name="lint" description="Perform syntax check of sourcecode files">
        <apply executable="php" failonerror="true">
            <arg value="-l" />

            <fileset dir="${basedir}/src">
                <include name="**/*.php" />
                <modified />
            </fileset>

            <fileset dir="${basedir}/tests">
                <include name="**/*.php" />
                <modified />
            </fileset>
        </apply>
    </target>

    <target name="phploc" description="Measure project size using PHPLOC">
        <exec executable="phploc">
            <arg value="--log-csv" />
            <arg value="${basedir}/build/logs/phploc.csv" />
            <arg path="${basedir}/src" />
        </exec>
    </target>

    <target name="pdepend" description="Calculate software metrics using PHP_Depend">
        <exec executable="pdepend">
            <arg value="--jdepend-xml=${basedir}/build/logs/jdepend.xml" />
            <arg value="--jdepend-chart=${basedir}/build/pdepend/dependencies.svg" />
            <arg value="--overview-pyramid=${basedir}/build/pdepend/overview-pyramid.svg" />
            <arg path="${basedir}/src" />
        </exec>
    </target>

    <target name="phpmd"
            description="Perform project mess detection using PHPMD and print human readable output. Intended for usage on the command line before committing.">
        <exec executable="phpmd">
            <arg path="${basedir}/src" />
            <arg value="text" />
            <arg value="${basedir}/phpmd.xml.dist" />
        </exec>
    </target>

    <target name="phpmd-ci" description="Perform project mess detection using PHPMD creating a log file for the continuous integration server">
        <exec executable="phpmd">
            <arg path="${basedir}/src" />
            <arg value="xml" />
            <arg value="${basedir}/phpmd.xml.dist" />
            <arg value="--reportfile" />
            <arg value="${basedir}/build/logs/pmd.xml" />
        </exec>
    </target>

    <target name="phpcs"
            description="Find coding standard violations using PHP_CodeSniffer and print human readable output. Intended for usage on the command line before committing.">
        <exec executable="vendor/bin/phpcs">
            <arg value="--standard=PSR2" />
            <arg path="${basedir}/src" />
        </exec>
    </target>

    <target name="phpcs-ci" description="Find coding standard violations using PHP_CodeSniffer creating a log file for the continuous integration server">
        <exec executable="vendor/bin/phpcs" failonerror="true">
            <arg value="--standard=PSR2" />
            <arg path="${basedir}/src" />
        </exec>
    </target>

    <target name="phpcpd" description="Find duplicate code using PHPCPD">
        <exec executable="phpcpd">
            <arg value="--log-pmd" />
            <arg value="${basedir}/build/logs/pmd-cpd.xml" />
            <arg path="${basedir}/src" />
        </exec>
    </target>

    <target name="phpdox" description="Generate API documentation using phpDox">
        <exec executable="phpdox">
            <arg value="-f" />
            <arg value="${basedir}/phpdox.xml.dist" />
        </exec>
    </target>

    <target name="phpunit" description="Run unit tests with PHPUnit">
        <exec executable="phpunit" failonerror="true">
            <arg value="-c" />
            <arg value="${basedir}/phpunit.xml.dist" />
        </exec>
    </target>

    <target name="phpunit-codecoverage" description="Run unit tests with PHPUnit and produce clover.xml">
        <exec executable="phpunit" failonerror="true">
            <arg value="--coverage-clover"/>
            <arg value="build/coverage/clover.xml"/>
        </exec>
    </target>

    <target name="coverage-checker" depends="phpunit-codecoverage" description="Check code coverage">
        <exec executable="php" failonerror="true">
            <arg value="coverage-checker.php"/>
            <arg value="build/coverage/clover.xml"/>
            <arg value="80"/>
        </exec>
    </target>

    <target name="phpcb" description="Aggregate tool output with PHP_CodeBrowser">
        <exec executable="phpcb">
            <arg value="--log" />
            <arg path="${basedir}/build/logs" />
            <arg value="--source" />
            <arg path="${basedir}/src" />
            <arg value="--output" />
            <arg path="${basedir}/build/code-browser" />
        </exec>
    </target>
</project>